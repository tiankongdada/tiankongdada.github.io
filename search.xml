<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>为博客插入音乐</title>
      <link href="/2023/04/06/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E9%9F%B3%E4%B9%90/"/>
      <url>/2023/04/06/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E9%9F%B3%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>偶然间看到别人的博客有音乐挂件，必须安排！</p><p>搜了下可以利用插件<code>hexo-tag-aplayer</code> 播放器支持一些主流平台的音乐播放，这里我用了网易云音乐。</p><p><strong>效果</strong>：可以折叠起来，展开来是这样的：</p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230406195058.png" style="zoom:50%;" /><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><h5 id="安装hexo插件"><a href="#安装hexo插件" class="headerlink" title="安装hexo插件"></a>安装hexo插件</h5><p>打开<code>Mac</code>终端<code>cd</code>到博客目录</p><pre><code>npm install --save hexo-tag-aplayer</code></pre><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>在Hexo配置文件<code>_config.xml</code>搜索<code>aplayer</code>，搜索不到就在最后添加.</p><pre><code>aplayer:  meting: true  asset_inject: false </code></pre><p>主题配置文件中修改配置</p><pre><code>aplayerInject:  enable: true  per_page: true</code></pre><p>还有个配置修改，作用时切换页面时音乐不会中断</p><pre><code>pjax:  enable: true  exclude:</code></pre><h5 id="插入Aplayer播放器"><a href="#插入Aplayer播放器" class="headerlink" title="插入Aplayer播放器"></a>插入Aplayer播放器</h5><h6 id="引入播放器的位置和对应的单个音乐或者歌单的设置"><a href="#引入播放器的位置和对应的单个音乐或者歌单的设置" class="headerlink" title="引入播放器的位置和对应的单个音乐或者歌单的设置"></a>引入播放器的位置和对应的单个音乐或者歌单的设置</h6><pre><code>inject:  head:  bottom:    # - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;     - &lt;div class=&quot;aplayer&quot; data-id=&quot;8283046977&quot; data-server=&quot;netease&quot; data-type=&quot;playlist&quot; data-fixed=&quot;true&quot; data-mini=&quot;true&quot; data-listFolded=&quot;false&quot; data-order=&quot;random&quot; data-preload=&quot;none&quot; data-autoplay=&quot;true&quot; muted&gt;&lt;/div&gt;</code></pre><p><code>div</code>内的有必要修改的属性对应如下:</p><table><thead><tr><th>选项</th><th align="center">描述</th></tr></thead><tbody><tr><td>data-id</td><td align="center">歌曲id&#x2F;歌单id</td></tr><tr><td>data-server</td><td align="center">平台：netease(网易云音乐),tencent(腾讯音乐),kugou(酷狗)</td></tr><tr><td>data-type</td><td align="center">song, playlist   (一首，一列歌单)</td></tr></tbody></table><h6 id="data-id获取方式："><a href="#data-id获取方式：" class="headerlink" title="data-id获取方式："></a><code>data-id</code>获取方式：</h6><p>直接新建一个blog歌单，添加歌曲之后，只要重新更新下博客就能更新歌曲列表了。</p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230406201830.png" style="zoom:33%;" /><p>附上参考的文章。这兄弟博客可真好看</p><pre><code>https://butterfly.js.org/posts/507c070f/</code></pre><h1 id="end"><a href="#end" class="headerlink" title="end"></a>end</h1>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《流浪地球2》没说的都在这里了</title>
      <link href="/2023/02/20/%E3%80%8A%E6%B5%81%E6%B5%AA%E5%9C%B0%E7%90%832%E3%80%8B%E6%B2%A1%E8%AF%B4%E7%9A%84%E9%83%BD%E5%9C%A8%E8%BF%99%E9%87%8C%E4%BA%86/"/>
      <url>/2023/02/20/%E3%80%8A%E6%B5%81%E6%B5%AA%E5%9C%B0%E7%90%832%E3%80%8B%E6%B2%A1%E8%AF%B4%E7%9A%84%E9%83%BD%E5%9C%A8%E8%BF%99%E9%87%8C%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h2 id="《流浪地球2》没说的都在这里了"><a href="#《流浪地球2》没说的都在这里了" class="headerlink" title="《流浪地球2》没说的都在这里了"></a>《流浪地球2》没说的都在这里了</h2><p><strong>来源：<a href="https://www.cas.cn/kx/kpwz/202302/t20230206_4874009.shtml">中国科学院科学普及</a></strong></p><p>　　地球本身不是一块坚硬的石头，地壳下40—70公里处是熔岩，有点类似于鸡蛋的结构。如果想驱动1万多座发动机，仅耗时百年来推动地球“行走”，发动机对地球产生的压力，是地球承担不起的，会把“鸡蛋”的壳击碎。而如果发动机缓慢加速逐渐达到最大功率，那地球“流浪”的时间将更长，甚至要成千上万年的时间。在“流浪”期间，地球会发生什么、遭遇什么，人类文明又将经历什么，都很难预料。</p><p>　　如果太阳危机近在眼前，人类该如何生存下去？地球作为目前银河系中已知的唯一存在生命的星球，时刻接受着太阳的“烤问”。</p><p>　　在五六十亿年后，太阳即将迎来其生命的“终点”，这种“烤问”就会变得无比致命。</p><p>　　最近大火的电影《流浪地球2》，便是在这种末日即将降临的背景下展开的。影片中，人类试图借助万座巨大的行星发动机、洞悉一切的量子计算机、高耸入云的太空电梯求得一线生机。</p><p>　　那么，在现实中，太阳最终会对地球造成致命一击吗？地球会随着太阳一起衰亡吗？行星发动机是否真的能推动地球去“流浪”？为此，科技日报记者采访了《流浪地球2》的多位科学顾问、专家学者，一起解读有关“流浪地球”的硬核科学。</p><p>　　<strong>若太阳走向终结，地球能否幸免于难？</strong></p><p>　　太阳危机初现，人类携手迎难而上……《流浪地球2》展现的未来图景，残酷却又激荡人心。</p><p>　　太阳这个距离地球约1.5亿公里的巨大“火球”，是太阳系中最大的天体。大约在46亿年前，太阳在距离银河系中心约2.6万光年处，由星云在自身引力作用下坍塌凝聚而成。</p><p>　　目前，太阳正处于壮年期，在天文上被称为主序星阶段，这个阶段大约会持续100亿年。它为地球带来了光明与能量，是生命起源必不可少的因素。但太阳黑子、耀斑和日冕物质抛射等也时常对人类生产生活造成破坏。</p><p>　　然而，太阳最终会老去，《流浪地球2》的缘起，便是太阳的急速膨胀老化。</p><p>　　在银河系里，90%以上的恒星最终都会演化成白矮星。在它们的演化末期，会吞噬其附近轨道的行星。作为一颗“普普通通”的恒星，太阳的归宿也是白矮星。这是否意味着，太阳周围包括地球在内的行星注定也将被吞噬？</p><p>　　“如果行星距离恒星的位置比较近，则被恒星吞噬的可能性很大。”《流浪地球2》科学顾问、中国科学院国家天文台研究员苟利军告诉科技日报记者。</p><p>　　不过，“被吞噬”并非行星唯一的归宿。太阳最后会经历一次行星状星云的爆发，变为一颗白矮星。在白矮星的周围，原有的行星也是有可能存在的。</p><p>　　随着人类观测手段的提高，天文学家也的确在白矮星周围发现了一些围绕白矮星运行的行星。</p><p>　　2020年9月16日，国际权威学术期刊《自然》刊文称，美国科学家团队首次公布了一颗木星大小的行星围绕白矮星旋转的证据。此外，2022年2月，英国天文学家发现，距地球117光年的一颗编号为WD1054-226的白矮星附近的“宜居”地带，也可能存在着一颗行星。</p><p>　　<strong>地球是否可以逃离，躲避“太阳危机”？</strong></p><p>　　2078年，地球将遭遇太阳“氦闪”危机，是电影中人类决定“流浪”的关键。</p><p>　　氦闪是太阳演化的关键环节，也是地球接受太阳“烤问”的生死时刻。</p><p>　　“太阳之所以会发光，是因为太阳核心正在发生核反应，那里的氢通过聚变合成氦，这个过程会逐渐消耗氢，继而导致太阳核心的坍缩。同时，太阳核心之外的包层在高压强下发生膨胀。”南京大学天文与空间科学学院教授陈鹏飞告诉记者，“当以氦为主要成分的太阳核心逐渐收缩时，其温度也越来越高。当温度达到约1亿摄氏度时，氦会被点燃，大量的氦在几分钟内完成聚变反应，释放的能量很巨大，发出的光会猛然增加约50倍，这个过程就是氦闪。”</p><p>　　再过50多亿年，太阳演变为红巨星后，其表面温度可能会从现在的5700多摄氏度降为约3000摄氏度，届时太阳核心的氢将消耗殆尽。《流浪地球2》科学顾问、中国科学院物理所研究员梁文杰说：“氦闪通常会发生在红巨星演化末期。红巨星阶段，太阳已经膨胀到地球轨道，而且表面温度达到约3000摄氏度，而地球岩石的熔化温度在2000摄氏度以下。因此，无论是红巨星阶段的温度变化，还是突然爆发的氦闪，都会让地球熔化。”</p><p>　　如果50多亿年后，地球生存危机在所难免，那么是否可以在太阳的“膨胀期”提前避其锋芒，改变轨道另寻去处，待氦闪等危机解除后，再重返原来的地球轨道？</p><p>　　梁文杰认为，即使太阳危机解除后重返原来的地球轨道，对于地球来说，可能意义也不大了，“因为那时的太阳已经进入衰老期，它提供的热量应该无法维持地球生命的生存了。太阳系中的木星、土星、天王星、海王星，由于距离太阳较远，均为冰冻星球，星球温度在零下一二百摄氏度。届时地球如果还想回到太阳周围获取能量，就要不断修正轨道，逼近太阳，但最终太阳这个‘大火球’还是会‘熄灭’的。”</p><p>　　“就算暂时‘离家出走’再重返家园是可行的。可地球需要先加速离开原有轨道后再减速，速度调节的过程会很漫长，而且这会消耗地球上巨大的能量，工程浩大。更何况，重返地球目前的轨道、逼近太阳的过程，也存在风险。”梁文杰说。</p><p>　　而如果放弃太阳，寻找其他恒星，也将面临更大挑战。苟利军认为，假如地球另择宇宙“栖息地”，选择新的恒星环绕运行，就意味着要“适应”一个新的行星轨道，那么进入轨道的速度、方向、能量等都需要精准测算，人类现有的技术在短期内难以实现行星级天体的入轨。</p><p>　　<strong>核聚变会是更好的“流浪”方案吗？</strong></p><p>　　影片中，人类试图通过移山计划、方舟计划、逐月计划、数字生命计划在末日来临时寻找生机。最终，上万座巨大的行星发动机，成为推动地球开启“流浪之旅”的希望。</p><p>　　梁文杰为影片中的行星发动机、月球发动机、逐月计划的物理效应以及月亮爆炸方式等内容提供过建议，他表示：“从艺术上来说，影片中的地球‘流浪’方式是一个伟大的想象，但从目前的科学水平来说还很难实现。”</p><p>　　梁文杰解释：“地球本身不是一块坚硬的石头，地壳下40—70公里处是熔岩，有点类似于鸡蛋的结构。如果想驱动1万多座发动机，仅耗时百年来推动地球‘行走’，发动机对地球产生的压力，是地球承担不起的，会把‘鸡蛋’的壳击碎。而如果发动机缓慢加速逐渐达到最大功率，那地球‘流浪’的时间将更长，甚至要成千上万年的时间。在‘流浪’期间，地球会发生什么、遭遇什么，人类文明又将经历什么，都很难预料。”</p><p>　　“但如果考虑能源供给方式，受控核聚变很值得期待，虽然现在还面临很大的技术挑战。”梁文杰介绍，核聚变是在高温情况下，让两个原子核相互碰撞，最终结合，生成一个新的原子核，其间能释放巨大的能量。这其中的关键是要将核聚变产生的能量长期、持续地向外稳定输出，要实现这一点目前还需要攻克很多技术难题。</p><p>　　不过，即便氢的核聚变最终能够实现，可以为人类提供大量能源，但核聚变所需要的重要原料氘、氚，在地球海水中的丰度较低，核聚变原料氦-3的储量也异常稀少。因此，以目前人类拥有的资源总量来看，核聚变的能量还是不足以推动地球离开太阳系。</p><p>　　那么，是否可以像《流浪地球2》中那样“烧石头”，通过重核聚变获取能量呢？梁文杰表示，重核聚变指的是采用硅、氧等比较重的元素作为聚变原料获得核能。相较于以氘、氚、氦-3为原料的轻核聚变，重核聚变获得聚变能的效率很低。虽然硅和氧元素在地壳中的比例较大，但为了克服重元素原子核之间巨大的静电斥力，使它们产生核聚变反应，需要更高的温度和更强的压力，反应温度甚至需达几十亿摄氏度，这极大地挑战着目前人类的科技能力。</p><p>　　<strong>延伸阅读</strong> <strong>宇宙中是否有流浪行星？</strong></p><p>　　如果有一天，地球不得不踏上“流浪”之旅，是否能在茫茫宇宙中遇到“同病相怜”的天体？</p><p>　　《流浪地球2》科学顾问、中国科学院国家天文台研究员苟利军介绍，在宇宙中，有一类不环绕任何恒星公转的行星，即流浪行星。目前，人类已经探测到约100颗流浪行星，体积较大的约为木星的十几倍，较小的则接近地球。</p><p>　　“根据现在的了解，流浪行星产生的方式可能有两种：一种是它们本身形成的时候就只有行星本身。而另外一种可能性，就是该行星是从恒星系统当中被‘抛射’出来的。”苟利军举例，如果一颗较大的恒星在太阳系附近，就有可能在引力的作用下，使太阳系最外侧的行星偏离原有轨道，并最终脱离太阳系。</p><p>　　《流浪地球2》科学顾问、中国科学院物理所研究员梁文杰则提供了另一种假设：大的恒星在演化末期会经历一次剧烈爆炸，即超新星爆发，并抛射出大量的星际物质。“恒星附近的行星就可能在此时被抛出原有的轨道，变成一颗颗流浪行星。”</p><p>　　近年来，随着观测技术的提高，流浪行星不断被人类发现。2018年8月，美国科学家证实，一颗质量约为木星12倍的行星在距离地球约20光年的地方独自流浪，并不依附于任何恒星，是使用射电望远镜发现的首颗流浪行星。</p><p>　　2020年，美国和波兰天文学家在《天体物理学杂志快报》撰文指出，他们借助微引力透镜，可能发现了迄今已知最小的流浪行星，其“体重”约为地球的10%。</p><p>　　“流浪行星不发光，所以很难被探测到，它们被发现往往缘于一个偶发事件，所以被探测器关注的时间非常短暂，这也导致了目前人们对流浪行星的研究十分有限。”苟利军表示，根据目前人类的技术水平，尚无法判断流浪行星上是否有生命。</p><p>　　梁文杰分析，生命的存在除了需要构成生命体的元素，例如氨基酸、碳、氢等物质，还需要适宜的温度。“宇宙的演化有时会将一些有机物抛射到星体上，而有机物存活，需要适宜的温度。流浪行星不发热，也没有恒星为其提供热量，所以会不断降温，直至降低到宇宙最低温度，这样的低温是很难孕育生命的。”梁文杰说。</p>]]></content>
      
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo的第一篇文章教程</title>
      <link href="/2023/02/19/Hexo%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E6%95%99%E7%A8%8B/"/>
      <url>/2023/02/19/Hexo%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​搭建好博客之后兴冲冲写第一篇文章发现关于图片产生不少问题。先后尝试了不少方式，冲着准备长期更新的原因，还是选择了用<code>PicGo+Github</code>的方式搭建个人图床：将图片上传到Github并使用PicGo返回一个可以使用的网图地址url。</p><p>​目前这个方式还算简单和稳定，加载速度也可以，暂时就先这样了。毕竟博客重点还是在于内容。</p><h3 id="使用-PicGo-GitHub-搭建个人图床"><a href="#使用-PicGo-GitHub-搭建个人图床" class="headerlink" title="使用 PicGo + GitHub 搭建个人图床"></a>使用 PicGo + GitHub 搭建个人图床</h3><h4 id="新建Github库获取token"><a href="#新建Github库获取token" class="headerlink" title="新建Github库获取token"></a>新建Github库获取token</h4><p>进入Github官网，右上角+号选择新建仓库</p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230322135202.png" style="zoom:50%;" /><p>建好后点击右上角头像setting–&gt;Developer Setting</p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230322135513.png" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230322135922.png" style="zoom:50%;" /><p>确定后拿到token就可以了。</p><h4 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h4><p><strong>下载安装 PicGo</strong>：<a href="https://github.com/Molunerfinn/picgo/releases">https://github.com/Molunerfinn/picgo/releases</a></p><p>Mac选择.dmg下载，Intel芯片的Mac选择x64</p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230322140402.png" style="zoom:50%;" /><p>打开PicGo开始设置</p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230322140637.png" style="zoom:50%;" /><p><strong>图床设置选择Github，填完后点击设为默认图床，再确定</strong></p><pre><code>仓库名：Github用户名/仓库名分支名：maintoken:从Github生成的存储路径：可不填自定义域名： https://cdn.jsdelivr.net/gh/github账号的用户名/仓库名</code></pre><p>相册设置成Github和返回url,PicGo设置打开上传后自动复制URL,其他的我也没改动</p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230322141332.png" style="zoom:50%;" /><p>每次截图我都是用这个剪贴板图片快捷上传，因为设置过自动复制返回的URL，上传成功后剪贴板上的内容就变成了图床的URL</p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230322141757.png" style="zoom:50%;" /><h4 id="PicGo图片不显示问题"><a href="#PicGo图片不显示问题" class="headerlink" title="PicGo图片不显示问题"></a>PicGo图片不显示问题</h4><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230322132924.png" style="zoom:50%;" /><p>如果出现PicGo不显示图片的问题</p><p><strong>解决：</strong> </p><p>是因为自定义域名 <code>https://cdn.jsdelivr.net/gh/github账号的用户名/仓库名</code>加载不够快的原因</p><p>只需要在hosts文件的最后一行添加以下内容：</p><pre><code class="XML">104.16.85.20 cdn.jsdelivr.net</code></pre><p>Mac OS下打开终端</p><pre><code>sudo vim /etc/hosts  //进入hostsi//输入i进入编辑esc//退出编辑:wq//关闭终端,记得重新打开一下看看是否加入成功</code></pre><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230322133629.png" style="zoom:40%;" /><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><h4 id="下载typora"><a href="#下载typora" class="headerlink" title="下载typora"></a>下载typora</h4><p>新建文章之前先下载一个<code>markdown</code>文件编辑器用于写文章，我选了<code>typora</code>软件</p><p>因为软件是收费的，所以附上<strong>激活教程</strong>：</p><p>官网下载安装之后，进入应用程序打开包内容 <code>/Applications/Typora.app/Contents/Resources/TypeMark/ page-list/static/js</code></p><p>找到180字样的文件编辑打开</p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230322130753.png" style="zoom:50%;" /><p>输入 <code>hasActivated=&quot;true&quot;==e.hasActivated</code> 进行搜索</p><p>将它改为 <code>hasActivated=&quot;true&quot;==&quot;true&quot;</code></p><p>重新打开<code>typora</code>看到成功激活.</p><p>在Hexo生成文章之后，你可以用<code>typora</code>打开博客根目录下的<code>source/_posts</code>文件夹即可</p><h4 id="typora基本语法"><a href="#typora基本语法" class="headerlink" title="typora基本语法"></a><code>typora</code>基本语法</h4><p><a href="https://blog.csdn.net/slf13754951386/article/details/120463369?ops_request_misc=&request_id=&biz_id=102&utm_term=typora%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-120463369.142%5Ev75%5Einsert_down38,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187">一些基本的markdown语法,引用了csdn中的一篇</a></p><h4 id="Hexo创建文章"><a href="#Hexo创建文章" class="headerlink" title="Hexo创建文章"></a>Hexo创建文章</h4><p>使用<code>git</code>或者终端进入<code>Blog</code>的根目录，执行指令即可生成<code>markdown</code>文件</p><pre><code>hexo new 文章名</code></pre><p><strong>改动每次使用 <code>hexo new</code>生成的md文档模板：</strong></p><p>打开根目录下的<code>scaffolds</code>文件夹里面的<code>post.md</code>文件，进行自定义更改即可。</p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230322124725.png" style="zoom:50%;" /><p>用<code>typora</code>打开新生成的文件，</p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230322125128.png" style="zoom:50%;" /><p>这里需要注意红框内的：后需要空一格再赋值。如果写成</p><pre><code>tags:[hexo,github]</code></pre><p>则会<strong>报错</strong>：</p><pre><code class="yaml">YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key ...</code></pre><p>原因是YAML 语法规定必须要在冒号后加空格，所以没有空格的情况下会报错。</p><h4 id="如何插入图片"><a href="#如何插入图片" class="headerlink" title="如何插入图片"></a>如何插入图片</h4><p>截图选项选复制到剪贴板，然后打开PicGo点击剪贴板快捷上传，记得设置上传成功自动复制图片URL。</p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230322141757.png" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230322141332.png" style="zoom:50%;" /><p>上传成功后返回<code>typora</code>，此处不能直接选择<code>command+v</code> 。<strong>应选择格式-&gt;图像-&gt;插入图片,也可以直接用快捷键 <code>control+command+I</code></strong></p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230322142556.png" style="zoom:50%;" /><p>写完之后打开终端或者<code>git</code>重新部署到网站即可。</p><pre><code>hexo cleanhexo ghexo d</code></pre><h3 id="the-End"><a href="#the-End" class="headerlink" title="the End."></a>the End.</h3>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> PicGo </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建个人博客</title>
      <link href="/2023/02/18/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/02/18/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Hexo 是一个快速、简洁且高效的博客框架。使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<a href="https://hexo.io/zh-cn/">点击查看官网</a></p><p>本文主要记录Mac OS下通过hexo搭建个人博客并部署在github平台，通过网站来访问自己的博客。</p><p>分为Hexo安装和部署到GitHub两个部分</p><p>这里是我的<a href="https://tiankongdada.github.io/">Blog</a></p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p><strong>Git下载安装</strong>  登录 git 官网，官网地址：<a href="https://git-scm.com/">Git</a>，登录官网后，点击下载链接</p><p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230321151056.png"></p><p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230321151258.png"></p><p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230321151405.png"></p><p>点击 installer 或者2.33.0 安装即可</p><p><strong>Node.js 下载安装</strong></p><p>Hexo基于Node.js，Node.js下载地址：<a href="https://nodejs.org/en/download/">Nodejs下载</a>.</p><p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230321163828.png"></p><p>安装后，检测Node.js是否安装成功，在命令行中输入</p><p><code>node -v</code></p><p><strong>Hexo安装</strong></p><p>安装好git之后，选择你想要安装hexo的地方（如新建文件夹Blog）</p><p>使用终端进入Blog文件夹，需要用到几个Mac指令：</p><pre><code>ls  //显示当前文件目录cd  //进入文件夹cd / //返回根目录</code></pre><p>一般先cd到Blog这个文件夹，然后开始安装Hexo</p><pre><code>npm install -g hexo-cli</code></pre><p>结束后查看版本</p><pre><code>hexo -v</code></pre><p>开始使用Hexo，</p><pre><code>hexo init Blog //blog是我们刚才创建的文件夹名cd Blognpm installhexo generate //也可以写成 hexo ghexo s</code></pre><p>Blog目录下一般有以下几个文件夹：</p><p>node_modules: 依赖包<br>public：存放生成的页面<br>source：资源包<br>themes：主题模版<br>_config.yml: 博客的配置文件</p><p>接着，在浏览器中输入 <code>localhost:4000</code> 就可以看到生成的博客页面了</p><p><strong>将hexo部署到Github</strong></p><p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。</p><p>例如我github用户名是 tiankongdada，所以我的叫 <code>tiankongdada.github.io</code></p><p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230321170810.png"></p><p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230321171329.png"></p><p><strong>hexo生成 SSH 添加到 github 仓库</strong></p><p>由于后续都是通过 SSH 进行仓库代码的快速部署，所以这一步很有必要，如果之前有在你的电脑本地进行过你的 github 仓库的 SSH 绑定，那此步可跳过</p><pre><code>git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;</code></pre><p>可以用以下两条检查下你输入是否正确</p><pre><code>git config user.namegit config user.email</code></pre><p>然后输入以下语句，一路回车键</p><pre><code>ssh-keygen -t rsa -C &quot;youremail&quot;</code></pre><p>可以在Blog目录里找到.ssh目录 里面有id_rsa和id_rsa.pub ，打开id_rsa.pub复制全部内容。</p><p>ssh其实就是一对秘钥，其中，id_rsa 是你这台电脑的私人秘钥，自己留着，id_rsa.pub 是公共秘钥，可以随便给别人看。把这个公钥放在 Github 上，这样当你连接 Github 自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，就可以通过 git 上传你的文件到 Github 上。</p><p>然后再去Github网站，打开右上角图标选择Setting–&gt;SSH keys–&gt;New SSH Key</p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230321172938.png" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230321173545.png" style="zoom:50%;" /><p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/20230321173806.png"></p><p>验证是否成功</p><pre><code>sudo ssh -T git@github.com</code></pre><p>之后进入Blog目录，打开站点配置文件 <code>_config.yml</code>，翻到最后，进行如下修改，注意将XXXXXX修改成你的仓库名字</p><pre><code>deploy:  type: git  repo: git@github.com:XXXXXXX/XXXXXXXX.github.io.git  branch: master</code></pre><p>接着安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>然后开始部署</p><pre><code>hexo cleanhexo generatehexo deploy</code></pre><p>如果部署成功，登陆  http:&#x2F;&#x2F;你的仓库名.github.io 即可访问你的博客.</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的测试图片文章</title>
      <link href="/2023/02/17/%E6%88%91%E7%9A%84%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/02/17/%E6%88%91%E7%9A%84%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>加入一张图片</p><p><img src="https://cdn.jsdelivr.net/gh/tiankongdada/Image/avatar.jpg" alt="one pic"></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/17/hello-world/"/>
      <url>/2023/02/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
